---
title: "An Interview with Andy Neely"
tags: career
---

<div style="float:right; text-align: center; border: 1px solid black; margin: 0.5rem;">
  <div id="youtube_player" style="height: 195; width: 320;"></div><br/>
  <a href="https://www.youtube.com/embed/jehJ10j8h6s">(YouTube link)</a>
</div>

I've been asking a lot of coders about how they got where they got. I have a personal interest in [that long slump in the 'senior engineer' section of our career](https://www.youtube.com/watch?v=uTXmZssW9q0), but there are all sorts of fascinating stories along the way.

Andy Neely is on my Slack workspace and volunteered to talk about his career journey &mdash; it's a brave thing to tell the world what you're doing, and I applaud him for it. I've had a [few awesome volunteers willing to be in the spotlight](https://www.youtube.com/watch?v=KQ9nz9SEfA4), and I appreciate them a lot!

Andy said all kinds of really awesome things during the interview. So I'm going to pick out the best parts and link you to them from here. You can just watch the whole thing above, or you can jump in for the parts that sound really interesting.

<hr/>

Highlights (click the quote to go to that point in the video):

<span href="#" class="yt-seek" data-time="742">
    "Before I got hired at the consulting shop, a friend of mine and I figured out that we could (...) build a streaming radio station that played nothing but music from people from Omaha. (...) We had so many good musicians." (12:22)
</span>

<span href="#" class="yt-seek" data-time="925">
    "I think teaching is ultimately a selfish act. It really benefits the teacher a lot. Communicating these ideas helps me understand them better." (15:25)
</span>

<span href="#" class="yt-seek" data-time="951">
    "When you're dealing with somebody at (...the senior engineer...) level, you're dealing with a situation where interpersonal skills become incredibly critical. Senior engineers have an outsize effect on the organisation and what can launch your career trajectory early can end up causing problems later on." (15:51)
</span>

<span href="#" class="yt-seek" data-time="1022">
    "People that are really really smart and are used to thinking of themselves as the smartest person in the room are prone to a particular collection of problems that I don't see in other people. The number one problem is they adopt positions they can't be talked out of." (17:02)
</span>

<span href="#" class="yt-seek" data-time="1086">
    "(...For a senior engineer, the ability...) to parachute in here and there when you see somebody get a little bit stuck and not make progress for a day or two, so that you can help move them forward because those are teachable moments. If you throw them away on making somebody feel bad about themself, you've effectively caused two problems." (18:06)
</span>

<span href="#" class="yt-seek" data-time="1155">
    "One of the best engineers I've worked with(...), Michael Herold, is this fairly rare combination of incredibly competent and incredibly empathetic as a teacher. He has a teaching background, which is probably no coincidence." (19:15)
</span>

<span href="#" class="yt-seek" data-time="1326">
    "A lot of what drives impostor syndrome is this idea that if you don't know it off the top of your head, you're not good at it." (22:06)
</span>

Andy mentioned a Jim Weirich talk at Strange Loop. [Here's that talk](https://youtu.be/FITJMJjASUs).

<span href="#" class="yt-seek" data-time="1405">
    "You're generally not hired to do the things you know how to do off the top of your head, so much as you're hired to use the context to solve somewhat-novel problems that the business will encounter day to day. (...) The things you can figure out are more important than the things you already know, but the things you already know are the superpower that allows you to figure more things out." (23:25)
</span>

<span href="#" class="yt-seek" data-time="1646">
    "All hard problems are slow feedback loops in disguise." (27:26)
</span>

<span href="#" class="yt-seek" data-time="1723">
    "Your stakeholder will come to you with a laundry list of stuff they need, and hiding in that avalanche of details is two or three really important hooks that make all the difference." (28:43)
</span>

<span href="#" class="yt-seek" data-time="1936">
    "Something my father (said) when I swapped careers was the most important job of code is describing what it does to the reader and as a nice side effect it creates business value." (32:16)
</span>

<span href="#" class="yt-seek" data-time="2028">
    "We refactored a chunk of our system that is really important recently and it was an example of behaviour had built up at different points in the application. It had turned into a bit of a distributed unnamed feature." (33:48)
</span>

<span href="#" class="yt-seek" data-time="2518">
    "I discovered if I told people why I was doing things and I didn't tell them that what I was doing was considered technical or abstract, they just believed me. It turns out Ruby's kind of a well-built language and if you show people why you're doing something, they understand it." (41:58)
</span>

I suspect [this is the Jessica Kerr talk he mentioned](https://www.youtube.com/watch?v=tq5SQ4W3gRI).

<span href="#" class="yt-seek" data-time="2800">
    "I was at a wedding once and the bridesmaid said, 'heck, I would have married him just for his family!'" &mdash; which is how both of us feel about the Ruby community - you folks are lovely. (46:40)
</span>

<script>
    // Taken from https://developers.google.com/youtube/iframe_api_reference

    // 2. This code loads the IFrame Player API code asynchronously.
    var tag = document.createElement('script');

    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

    // 3. This function creates an iframe (and YouTube player)
    //    after the API code downloads.
    var player;
    window.player = player;
    function onYouTubeIframeAPIReady() {
    player = new YT.Player('youtube_player', {
      height: '195',
      width: '320',
      videoId: 'jehJ10j8h6s',
      events: {
        'onReady': onPlayerReady,
        'onStateChange': onPlayerStateChange
      }
    });
    }

    // 4. The API will call this function when the video player is ready.
    function onPlayerReady(event) {
        $(".yt-seek").click(function (e) {
            window.player.seekTo($(this).data("time"), true);
            e.preventDefault();
        });
        //event.target.playVideo();
    }

    // 5. The API calls this function when the player's state changes.
    //    The function indicates that when playing a video (state=1),
    //    the player should play for six seconds and then stop.
    var done = false;
    function onPlayerStateChange(event) {
        if (event.data == YT.PlayerState.PLAYING && !done) {
            //setTimeout(stopVideo, 6000);
            done = true;
        }
    }
    function stopVideo() {
        player.stopVideo();
    }
</script>
